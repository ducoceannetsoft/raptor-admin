type Integrator {
  id: String!
  first_name: String!
  last_name: String!
  email: String!
  phone: String!
  company_name: String
  address: String
  city: String
  state: String
  zip_code: String
  country: String
  shipping_address: String
  website_url: String
  company_size: Int
  clients: [Client]
}

type Client {
  id: String!
  first_name: String!
  last_name: String!
  email: String!
  phone: String!
  company_name: String
  address: String
  city: String
  state: String
  zip_code: String
  country: String
  shipping_address: String
  website_url: String
  company_size: Int
  integrator_id: String
  integrator: Integrator
  site: [Site]
}

input ClientInput {
  first_name: String!
  last_name: String!
  email: String!
  phone: String!
  company_name: String
  address: String
  city: String
  state: String
  zip_code: String
  country: String
  shipping_address: String
  website_url: String
  company_size: Int
  integrator_id: String
}

type Site {
  name: String!
  address: String
  city: String
  state: String
  zip_code: String
  country: String
  status: Int
  client_id: String!
  client: Client!
}

type Query {
  integrators(first_name: String): [Integrator]
  clients(searchText: String): [Client]
  client(id: String!): Client
  sites: [Site]
}

type IntegratorMutationResponse {
  success: Boolean!
  message: String
  integrator: Integrator
}

type Mutation {
  upsertIntegrator(
    first_name: String!
    last_name: String!
  ): IntegratorMutationResponse!
  createClient(clientInput: ClientInput): Client!
  deleteClient(id: String!): Client!
  updateClient(id: String!, clientInput: ClientInput): Client!
}
